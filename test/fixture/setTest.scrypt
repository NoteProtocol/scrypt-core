import "util.scrypt";


struct SetST {
    int a;
    bytes b;
}

contract SetTest {

    public function testStructAsKey(SortedItem<SetST> key, bytes data) {

        HashedSet<SetST> set = new HashedSet(b'');
        int size = set.size();
        SortedItem<SetST>  tmp = {{ 3, b'003300' }, 0};
        require(set.add(tmp));
        require(set.size() == size + 1);
        require(!set.has(key));
        require(set.add(key));
        require(set.has(key));
        require(set.size() == size + 2);
        require(set.data() == data);
    }

    public function testArrayAsKey(SortedItem<int[3]> key, bytes data) {

        HashedSet<int[3]> set = new HashedSet(b'');
        int size = set.size();
        SortedItem<int[3]>  tmp = {[3, 5, 7], 0};
        require(set.add(tmp));
        require(set.size() == size + 1);
        require(!set.has(key));
        require(set.add(key));
        require(set.has(key));
        require(set.size() == size + 2);
        require(set.data() == data);
    }

    public function testArrayAsKey2(SortedItem<SetST[3]> key, bytes data) {

        HashedSet<SetST[3]> set = new HashedSet(b'');
        int size = set.size();
        SortedItem<SetST[3]> tmp = {[{ 3, b'01' }, { 5, b'0001' }, { 7, b'010101' }], 0};
        require(set.add(tmp));
        require(set.has(tmp));
        require(set.size() == size + 1);
        require(!set.has(key));
        require(set.add(key));
        require(set.size() == size + 2);
        require(set.data() == data);
    }

    public function testDeleteInt(SortedItem<int>[10] initData, SortedItem<int> key) {

        HashedSet<int> set = new HashedSet(b'');

        loop (10) : i {
            require(set.add(initData[i]));
            require(set.has(initData[i]));
        }
        require(set.size() == 10);
        require(set.delete(key));
        require(!set.has(key));
        require(set.size() == 9);
    }

    public function testHas(SortedItem<int>[10] initData, SortedItem<int> key) {

        HashedSet<int> set = new HashedSet(b'');

        loop (10) : i {
            require(set.add(initData[i]));
            require(set.has(initData[i]));
        }
        require(set.size() == 10);
        require(set.has(key));
    }
}
