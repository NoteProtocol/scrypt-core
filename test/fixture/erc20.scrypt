// a basic ERC20-like fungible token
import "liberc20.scrypt";
contract Coin {
    PubKey minter;

    @state
    ERC20 liberc20;

    // mint new tokens to receiver
    public function mint(SortedItem<PubKey>  receiver, Sig minterSig, int balance, int amount, SigHashPreimage preimage) {
        // authenticate
        require(checkSig(minterSig, this.minter));
        require(this.liberc20.mint(receiver, balance, amount));
        require(this.propagateState(preimage));
    }

    // transfer tokens from sender to receiver
    public function transferFrom(SortedItem<PubKey>  sender, SortedItem<PubKey>  receiver, int amount, Sig senderSig, int senderBalance, int receiverBalance, SigHashPreimage preimage) {
        // authenticate
        require(checkSig(senderSig, sender.item));
        require(this.liberc20.transferFrom(sender, receiver, amount, senderBalance, receiverBalance));
        require(this.propagateState(preimage));
    }

    // burn tokens of a receiver
    public function burn(SortedItem<PubKey> receiver, Sig minterSig, int balance, int amount, SigHashPreimage preimage) {
        // authenticate
        require(checkSig(minterSig, this.minter));
        require(this.liberc20.burn(receiver, balance, amount));
        require(this.propagateState(preimage));
    }

    // propagate state to the next UTXO
    function propagateState(SigHashPreimage preimage) : bool {
        require(Tx.checkPreimageSigHashType(preimage, SigHash.SINGLE | SigHash.FORKID));
        bytes outputScript = this.getStateScript();
        bytes output = Utils.buildOutput(outputScript, SigHash.value(preimage));
        return hash256(output) == SigHash.hashOutputs(preimage);
    }
}
