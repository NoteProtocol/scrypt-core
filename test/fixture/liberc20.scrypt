// a basic ERC20-like fungible token
library ERC20 {
    int _totalSupply;

    HashedMap<PubKey, int> balances;

    // mint new tokens to a receiver
    function mint(SortedItem<PubKey> receiver, int balance, int amount) : bool {
        require(!this.balances.has(receiver) || this.balances.canGet(receiver, balance));
        require(this.balances.set(receiver, balance + amount));

        this._totalSupply += amount;
        return true;
    }

    // burn tokens of a receiver
    function burn(SortedItem<PubKey> receiver, int balance, int amount) : bool {
        require(this.balances.canGet(receiver, balance));
        require(balance >= amount);
        require(this.balances.set(receiver, balance - amount));

        this._totalSupply -= amount;
        return true;
    }

    // transfer tokens from sender to receiver
    function transferFrom(SortedItem<PubKey> sender, SortedItem<PubKey> receiver, int amount, int senderBalance, int receiverBalance) : bool {
        
        require(this.balances.has(sender));
        require(this.balances.canGet(sender, senderBalance));
        require(senderBalance >= amount);
        require(this.balances.set(sender, senderBalance - amount));
        require(!this.balances.has(receiver) || this.balances.canGet(receiver, receiverBalance));
        require(this.balances.set(receiver, receiverBalance + amount));

        return true;
    }

    function totalSupply() : int {
        return this._totalSupply;
    }

    function balanceOf(SortedItem<PubKey> account, int balance) : bool {
        return this.balances.canGet(account, balance);
    }
}
